(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{403:function(a,t,v){a.exports=v.p+"assets/img/C17C41FD-B1D1-4564-AE26-EB778E5E52CC.3d139a6b.png"},404:function(a,t,v){a.exports=v.p+"assets/img/589D153A-FC29-4E74-98F1-1D00DAA0A8A6.bb8d5bec.png"},405:function(a,t,v){a.exports=v.p+"assets/img/B910A7E7-60A0-46D9-B15D-40C75DCEF342.3074e591.png"},406:function(a,t,v){a.exports=v.p+"assets/img/90A085BB-0161-40C9-9ACE-17A787B281B9.2f983361.png"},495:function(a,t,v){"use strict";v.r(t);var _=v(19),s=Object(_.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"前端架构设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端架构设计"}},[a._v("#")]),a._v(" 前端架构设计")]),a._v(" "),t("h2",{attrs:{id:"架构风格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构风格"}},[a._v("#")]),a._v(" 架构风格")]),a._v(" "),t("ol",[t("li",[a._v("分层架构：每一层为上层提供服务")]),a._v(" "),t("li",[a._v("MVC架构：模型、视图和控制器职责分离")]),a._v(" "),t("li",[a._v("发布/订阅架构：基于事件的架构风格")]),a._v(" "),t("li",[a._v("管道和过滤器：处理数据流的架构模式")])]),a._v(" "),t("h2",{attrs:{id:"架构设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构设计"}},[a._v("#")]),a._v(" 架构设计")]),a._v(" "),t("h3",{attrs:{id:"层次设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#层次设计"}},[a._v("#")]),a._v(" 层次设计")]),a._v(" "),t("p",[a._v("层次金字塔，自上而下设计架构，至下而上完善架构")]),a._v(" "),t("ol",[t("li",[a._v("系统级： 整个系统如何与外界通信，如：前后的分离架构、微前端架构")]),a._v(" "),t("li",[a._v("应用级： 应用外部如何共享组件、通信等，如：模式库、组件库、设计系统")]),a._v(" "),t("li",[a._v("模块级： 应用内部如何模块化、数据和状态管理等，如：组件化、模块化")]),a._v(" "),t("li",[a._v("代码级： 从基础设施保障架构实施，如：规范、原则、质量")])]),a._v(" "),t("h2",{attrs:{id:"代码架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码架构"}},[a._v("#")]),a._v(" 代码架构")]),a._v(" "),t("p",[a._v("主要是对代码命名风格的规范统一")]),a._v(" "),t("h3",{attrs:{id:"测试策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试策略"}},[a._v("#")]),a._v(" 测试策略")]),a._v(" "),t("ol",[t("li",[a._v("E2E测试")]),a._v(" "),t("li",[a._v("服务测试")]),a._v(" "),t("li",[a._v("组件测试")]),a._v(" "),t("li",[a._v("单元测试")])]),a._v(" "),t("h2",{attrs:{id:"构建流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建流"}},[a._v("#")]),a._v(" 构建流")]),a._v(" "),t("p",[a._v("构建流中包含编译，如：gulp是基于管道（Pipe）思想的流编程，而webpack仅负责将代码编译为浏览器可执行的es5代码。")]),a._v(" "),t("h2",{attrs:{id:"设计风格指南"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计风格指南"}},[a._v("#")]),a._v(" 设计风格指南")]),a._v(" "),t("ul",[t("li",[a._v("设计原则：大小、位置、间距等")]),a._v(" "),t("li",[a._v("色彩：主题色、功能色、中性色")]),a._v(" "),t("li",[a._v("文字排印：字体、大小、对齐方式等")]),a._v(" "),t("li",[a._v("布局")]),a._v(" "),t("li",[a._v("组件库")]),a._v(" "),t("li",[a._v("文档、图片规范等")])]),a._v(" "),t("h3",{attrs:{id:"沉淀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#沉淀"}},[a._v("#")]),a._v(" 沉淀")]),a._v(" "),t("ul",[t("li",[a._v("组件库")]),a._v(" "),t("li",[a._v("模式库：组件库中用到的通用代码")])]),a._v(" "),t("h2",{attrs:{id:"微前端架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微前端架构"}},[a._v("#")]),a._v(" 微前端架构")]),a._v(" "),t("h3",{attrs:{id:"特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[a._v("#")]),a._v(" 特点")]),a._v(" "),t("ul",[t("li",[a._v("应用自治：减少模块间依赖")]),a._v(" "),t("li",[a._v("单一职责：要求页面间关联性低")]),a._v(" "),t("li",[a._v("技术栈无关")])]),a._v(" "),t("h3",{attrs:{id:"拆分原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拆分原则"}},[a._v("#")]),a._v(" 拆分原则")]),a._v(" "),t("ul",[t("li",[a._v("按照业务拆分")]),a._v(" "),t("li",[a._v("按照权限拆分")]),a._v(" "),t("li",[a._v("按照变更的频率拆分")]),a._v(" "),t("li",[a._v("按照组织结构拆分")]),a._v(" "),t("li",[a._v("跟随后端微服务拆分")])]),a._v(" "),t("h3",{attrs:{id:"拆分方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拆分方式"}},[a._v("#")]),a._v(" 拆分方式")]),a._v(" "),t("ul",[t("li",[a._v("路由分发\n"),t("img",{attrs:{src:v(403),alt:"3d139a6b7a368c0052ae545809eec54d"}})]),a._v(" "),t("li",[a._v("前端微服务化：是微服务架构在前端的实施，每个前端应用都是完全独立（技术栈、开发、部署、构建独立）、自主运行的，最后通过模块化的方式组合出完整的前端应用。通常配备single-spa\n"),t("img",{attrs:{src:v(404),alt:"bb8d5becf1039cff87a40f9fb52218c9"}})]),a._v(" "),t("li",[a._v("微应用：即在开发时，应用都是以单一、微小应用的形式存在，而在运行时，则通过构建系统合并这些应用，组合成一个新的应用。\n"),t("img",{attrs:{src:v(405),alt:"3074e591b82169ecbaf2668f42f0f7f5"}})]),a._v(" "),t("li",[a._v("微件化：微件（widget），指的是一段可以直接嵌入在应用上运行的代码，它由开发人员预先编译好，在加载时不需要再做任何修改或者编译。\n"),t("img",{attrs:{src:v(406),alt:"2f9833614f68724088779a1ef9290c6a"}})]),a._v(" "),t("li",[a._v("前端容器化：用iframe承载应用")]),a._v(" "),t("li",[a._v("应用组件化：使用Web Components")])]),a._v(" "),t("h3",{attrs:{id:"通信机制建立"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通信机制建立"}},[a._v("#")]),a._v(" 通信机制建立")]),a._v(" "),t("h4",{attrs:{id:"bridge-eventbus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bridge-eventbus"}},[a._v("#")]),a._v(" bridge eventbus")]),a._v(" "),t("p",[a._v("用于跨层级的通讯，由底层建立，遵守制定通信规则。")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 监听的事件名称由 应用名称 : 动作 + 名称 组成")]),a._v("\nbridge"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("on")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'basic:update-menu'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("h2",{attrs:{id:"渐进式架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渐进式架构"}},[a._v("#")]),a._v(" 渐进式架构")]),a._v(" "),t("p",[a._v("几种方式：")]),a._v(" "),t("ul",[t("li",[a._v("更新")]),a._v(" "),t("li",[a._v("重构")]),a._v(" "),t("li",[a._v("迁移")]),a._v(" "),t("li",[a._v("重写")]),a._v(" "),t("li",[a._v("重新架构")])]),a._v(" "),t("h3",{attrs:{id:"更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新"}},[a._v("#")]),a._v(" 更新")]),a._v(" "),t("p",[a._v("让旧应用的依赖和环境不断更新，以免成为一个不可维护的遗留系统")]),a._v(" "),t("h4",{attrs:{id:"升级项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级项"}},[a._v("#")]),a._v(" 升级项")]),a._v(" "),t("ul",[t("li",[a._v("依赖升级")]),a._v(" "),t("li",[a._v("框架升级")]),a._v(" "),t("li",[a._v("语言升级")])]),a._v(" "),t("h4",{attrs:{id:"指定维护策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定维护策略"}},[a._v("#")]),a._v(" 指定维护策略")]),a._v(" "),t("ul",[t("li",[a._v("合理的时间间隔，如三个月一次")]),a._v(" "),t("li",[a._v("定期检查依赖或使用工具自动检测")]),a._v(" "),t("li",[a._v("为更新预留时间和精力")]),a._v(" "),t("li",[a._v("准备文档策略，以记录过程中遇到的问题")])]),a._v(" "),t("h3",{attrs:{id:"常见问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[a._v("#")]),a._v(" 常见问题")]),a._v(" "),t("ul",[t("li",[a._v("重写的意义是否重大")]),a._v(" "),t("li",[a._v("时间成本能否接受")]),a._v(" "),t("li",[a._v("代码中隐藏的业务能否发现")])]),a._v(" "),t("h2",{attrs:{id:"参考文献"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[a._v("#")]),a._v(" 参考文献")]),a._v(" "),t("ul",[t("li",[a._v("前端架构：从入门到微前端")]),a._v(" "),t("li",[a._v("UX最佳实践：提高用户体验影响力的艺术")])])])}),[],!1,null,null,null);t.default=s.exports}}]);