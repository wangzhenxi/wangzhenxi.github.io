(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{455:function(t,a,s){t.exports=s.p+"assets/img/35645B35-7CC8-4EB9-8876-F354E6EABCA9.cd6ab44c.png"},456:function(t,a,s){t.exports=s.p+"assets/img/3330B1EC-9B91-4833-975B-8B51793C4E6A.78fb39c4.png"},457:function(t,a,s){t.exports=s.p+"assets/img/C42CF5C1-73E1-43C5-8B3E-C1C533A81F22.50ea3eff.png"},458:function(t,a,s){t.exports=s.p+"assets/img/E4EDB736-04B2-43D9-A9EE-388D6DCA8BD2.19fab6f0.png"},459:function(t,a,s){t.exports=s.p+"assets/img/13A3A798-3758-4E52-9BA3-569E7E8620EC.8c640720.png"},460:function(t,a,s){t.exports=s.p+"assets/img/20C3EDC8-CDD7-423F-BF89-188BC812F4D3.c84d5d22.png"},461:function(t,a,s){t.exports=s.p+"assets/img/F662E27B-E177-453F-A1A5-CDEEF54F647E.b9139966.png"},462:function(t,a,s){t.exports=s.p+"assets/img/B01D0388-038E-4FD9-AE89-6AAE0AB4635E.e1db2c86.png"},527:function(t,a,s){"use strict";s.r(a);var e=s(19),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"tcp-ip协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip协议"}},[t._v("#")]),t._v(" TCP&IP协议")]),t._v(" "),a("h2",{attrs:{id:"osi七层协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#osi七层协议"}},[t._v("#")]),t._v(" OSI七层协议")]),t._v(" "),a("p",[t._v("网络通信问题：")]),t._v(" "),a("ol",[a("li",[t._v("物理层： 网线，物理传输二进制数据")]),t._v(" "),a("li",[t._v("数据链路层： 保证数据双方正确发送和接收")])]),t._v(" "),a("p",[t._v("传输问题：")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("网络层： IP，解决寻址问题")]),t._v(" "),a("li",[t._v("传输层： TCP，保证数据完整性")])]),t._v(" "),a("p",[t._v("应用进程：")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("会话层： 用于管理会话")]),t._v(" "),a("li",[t._v("表示层： 按照接收方通信的语言，对传输内容进行封装，处理加解密，压缩解压")]),t._v(" "),a("li",[t._v("应用层： HTTP协议 DNS协议 按协议封装数据")])]),t._v(" "),a("h2",{attrs:{id:"tcp协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议"}},[t._v("#")]),t._v(" TCP协议")]),t._v(" "),a("p",[t._v("TCP 是一个可靠的（reliable）、面向连接的（connection-oriented）、基于字节流（byte-stream）、全双工的（full-duplex）协议。")]),t._v(" "),a("h3",{attrs:{id:"三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),a("p",[t._v("建立连接的过程是通过「三次握手」来完成的，顾名思义，通过三次数据交换建立一个连接。 通过三次握手协商好双方后续通信的起始序列号、窗口缩放大小等信息。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(455),alt:"cd6ab44c7347778a48c3d31707cd013a"}})]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("p",[a("img",{attrs:{src:s(456),alt:"78fb39c411b10150f83b6a99f75fa7f2"}})]),t._v(" "),a("h4",{attrs:{id:"面向连接-connection-oriented"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向连接-connection-oriented"}},[t._v("#")]),t._v(" 面向连接（connection-oriented）")]),t._v(" "),a("p",[t._v("面向连接的协议要求正式发送数据之前需要通过「握手」建立一个逻辑连接，结束通信时也是通过有序的四次挥手来断开连接。")]),t._v(" "),a("h4",{attrs:{id:"无连接-connectionless"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无连接-connectionless"}},[t._v("#")]),t._v(" 无连接（connectionless）")]),t._v(" "),a("p",[t._v("无连接的协议则不需要")]),t._v(" "),a("h4",{attrs:{id:"可靠的-reliable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可靠的-reliable"}},[t._v("#")]),t._v(" 可靠的（reliable）")]),t._v(" "),a("p",[t._v("IP 是一种无连接、不可靠的协议：它尽最大可能将数据报从发送者传输给接收者，但并不保证包到达的顺序会与它们被传输的顺序一致，也不保证包是否重复，甚至都不保证包是否会达到接收者。")]),t._v(" "),a("p",[t._v("TCP 要想在 IP 基础上构建可靠的传输层协议，必须有一个复杂的机制来保障可靠性。")]),t._v(" "),a("p",[t._v("主要有下面几个方面：")]),t._v(" "),a("ul",[a("li",[t._v("对每个包提供校验和")]),t._v(" "),a("li",[t._v("包的序列号解决了接收数据的乱序、重复问题")]),t._v(" "),a("li",[t._v("超时重传")]),t._v(" "),a("li",[t._v("流量控制、拥塞控制")])]),t._v(" "),a("p",[a("strong",[t._v("校验和（checksum）：")])]),t._v(" "),a("p",[t._v("每个 TCP 包首部中都有两字节用来表示校验和，防止在传输过程中有损坏。如果收到一个校验和有差错的报文，TCP 不会发送任何确认直接丢弃它，等待发送端重传。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(457),alt:"50ea3effc324f327cb271e7727ff9ab2"}})]),t._v(" "),a("p",[a("strong",[t._v("包的序列号保证了接收数据的乱序和重复问题：")])]),t._v(" "),a("p",[t._v("假设我们往 TCP 套接字里写 3000 字节的数据导致 TCP发送了 3 个数据包，每个数据包大小为 1000 字节：第一个包序列号为[1~1001)，第二个包序列号为 [1001~2001)，第三个包序号为[2001~3001)")]),t._v(" "),a("p",[a("img",{attrs:{src:s(458),alt:"19fab6f09715d9cfbac06a51257da605"}})]),t._v(" "),a("p",[t._v("假如因为网络的原因导致第二个、第三个包先到接收端，第一个包最后才到，接收端也不会因为他们到达的顺序不一致把包弄错，TCP 会根据他们的序号进行重新的排列然后把结果传递给上层应用程序。")]),t._v(" "),a("p",[t._v("如果 TCP 接收到重复的数据，可能的原因是超时重传了两次但这个包并没有丢失，接收端会收到两次同样的数据，它能够根据包序号丢弃重复的数据。")]),t._v(" "),a("p",[a("strong",[t._v("超时重传：")])]),t._v(" "),a("p",[t._v("TCP 发送数据后会启动一个定时器，等待对端确认收到这个数据包。如果在指定的时间内没有收到 ACK 确认，就会重传数据包，然后等待更长时间，如果还没有收到就再重传，在多次重传仍然失败以后，TCP 会放弃这个包。后面我们讲到超时重传模块的时候会详细介绍这部分内容。")]),t._v(" "),a("p",[a("strong",[t._v("流量控制、拥塞控制：")])]),t._v(" "),a("p",[t._v("这部分内容较复杂，后面有专门的文章进行讲解，这里先不展开。")]),t._v(" "),a("h4",{attrs:{id:"基于字节流-byte-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于字节流-byte-stream"}},[t._v("#")]),t._v(" 基于字节流（byte-stream）")]),t._v(" "),a("p",[t._v("TCP 是一种字节流（byte-stream）协议，流的含义是没有固定的报文边界。")]),t._v(" "),a("h4",{attrs:{id:"全双工的-full-duplex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全双工的-full-duplex"}},[t._v("#")]),t._v(" 全双工的（full-duplex）")]),t._v(" "),a("p",[t._v("在 TCP 中发送端和接收端可以是客户端/服务端，也可以是服务器/客户端，通信的双方在任意时刻既可以是接收数据也可以是发送数据，每个方向的数据流都独立管理序列号、滑动窗口大小、MSS 等信息。")]),t._v(" "),a("h2",{attrs:{id:"网络分层设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络分层设计"}},[t._v("#")]),t._v(" 网络分层设计")]),t._v(" "),a("h3",{attrs:{id:"网络访问层-network-access-layer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络访问层-network-access-layer"}},[t._v("#")]),t._v(" 网络访问层（Network Access Layer）")]),t._v(" "),a("p",[t._v("网络访问层也有说法叫做网络接口层，以太网、Wifi、蓝牙工作在这一层，网络访问层提供了主机连接到物理网络需要的硬件和相关的协议。这一层我们不做重点讨论。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(459),alt:"8c6407208d8a3a8ebfd678b09235db86"}})]),t._v(" "),a("h2",{attrs:{id:"tcp报文头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp报文头部"}},[t._v("#")]),t._v(" TCP报文头部")]),t._v(" "),a("p",[a("img",{attrs:{src:s(460),alt:"c84d5d225ea5fe6c502d07226dd6ffda"}})]),t._v(" "),a("ul",[a("li",[t._v("SYN（Synchronize）：用于发起连接数据包同步双方的初始序列号")]),t._v(" "),a("li",[t._v("ACK（Acknowledge）：确认数据包")]),t._v(" "),a("li",[t._v("RST（Reset）：这个标记用来强制断开连接，通常是之前建立的连接已经不在了、包不合法、或者实在无能为力处理")]),t._v(" "),a("li",[t._v("FIN（Finish）：通知对方我发完了所有数据，准备断开连接，后面我不会再发数据包给你了。")]),t._v(" "),a("li",[t._v("PSH（Push）：告知对方这些数据包收到以后应该马上交给上层应用，不能缓存起来")])]),t._v(" "),a("h2",{attrs:{id:"数据包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据包"}},[t._v("#")]),t._v(" 数据包")]),t._v(" "),a("p",[a("strong",[t._v("MTU（Maximum Transmission Unit）：")]),t._v(" 最大传输单元")]),t._v(" "),a("p",[a("strong",[t._v("MSS（Max Segment Size）：")]),t._v(" TCP 最大段大小")]),t._v(" "),a("p",[t._v("MSS = MTU - IP header头大小 - TCP 头大小")]),t._v(" "),a("p",[t._v("在以太网中 TCP 的 MSS = 1500（MTU） - 20（IP 头大小） - 20（TCP 头大小）= 1460")]),t._v(" "),a("h2",{attrs:{id:"端口号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#端口号"}},[t._v("#")]),t._v(" 端口号")]),t._v(" "),a("p",[t._v("一般1024~65525端口段可分配。")]),t._v(" "),a("h3",{attrs:{id:"标识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标识"}},[t._v("#")]),t._v(" 标识")]),t._v(" "),a("p",[t._v("链路层标识： MAC\nIP层标识： IP地址\n传输层标识： 端口号")]),t._v(" "),a("h3",{attrs:{id:"检测端口号开启情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检测端口号开启情况"}},[t._v("#")]),t._v(" 检测端口号开启情况")]),t._v(" "),a("p",[t._v("使用 nc 和 telnet 这两个命令可以非常方便的查看到对方端口是否打开或者网络是否可达")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("\ntelnet "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.211")]),t._v(".55.12 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("\nTrying "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.211")]),t._v(".55.12"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nConnected to "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.211")]),t._v(".55.12. \nEscape character is "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^]'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.211")]),t._v(".55.12 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("\nNcat: Connected to "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.211")]),t._v(".55.12:6379\n")])])]),a("h3",{attrs:{id:"检测端口号占用情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检测端口号占用情况"}},[t._v("#")]),t._v(" 检测端口号占用情况")]),t._v(" "),a("ol",[a("li",[t._v("使用 netstat")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(461),alt:"b9139966dad2eeaa85cc55d60bf9e402"}})]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("使用 lsof")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(462),alt:"e1db2c8693c28cabae9c629133f4a5c2"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);